mkdir ${folder_name}
copy example\"*" ${folder_name}
code .\requirements.txt & check the model
code Dockerfile & check the command
code .env & check the variables
code docker-compose.yml & check the services

# 注意資料夾位置，要用"反斜線"
docker compose run --rm web django-admin startproject ${COMPOSE_PROJECT_NAME}

# 想要在Project裡面建立App，可以使用指令設定App路徑
mkdir ${COMPOSE_PROJECT_NAME}/${APP_NAME}

# django-admin startapp 和 python manage.py startapp 執行上沒有差異，不過在測試上 django-admin startapp 才能在docker執行
# 如果出現錯誤：
# 1.TypeError: argument of type 'PosixPath' is not iterable
# Ans.去settings.py裡面的DATABASES做更改，我猜是django版本問題

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': str(BASE_DIR / 'db.sqlite3'),
        }
    }

# 2.TypeError: unsupported operand type(s) for /: 'str' and 'str'
# Ans.去settings.py裡面的STATIC做更改，我猜是django版本問題

    STATIC_URL = '/static/'
    STATIC_ROOT = BASE_DIR + '/staticfiles'
    STATICFILES_DIRS = [
        BASE_DIR + '/static'
    ]

docker compose run --rm web django-admin startapp ${APP_NAME} ./${COMPOSE_PROJECT_NAME}/${APP_NAME}

cd ${COMPOSE_PROJECT_NAME}

# 下面是我認為基礎的設置，其他的功能可以看Github的code
code ${COMPOSE_PROJECT_NAME}/settings.py

    DEBUG = True

    ALLOWED_HOSTS = ['*']


    # Application definition

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',

        '${APP_NAME}',
    ]

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [BASE_DIR / 'templates'],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

    # Internationalization
    # https://docs.djangoproject.com/en/4.1/topics/i18n/

    LANGUAGE_CODE = 'zh-hant'

    TIME_ZONE = 'Asia/Taipei'

    USE_I18N = True

    USE_TZ = True


    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/4.1/howto/static-files/

    STATIC_URL = 'static/'
    STATIC_ROOT = BASE_DIR / 'staticfiles/'
    STATICFILES_DIRS = [
        BASE_DIR / 'static'
    ]

# 放置模板的位置
mkdir ${COMPOSE_PROJECT_NAME}/templates & mkdir ${COMPOSE_PROJECT_NAME}/templates
mkdir ${COMPOSE_PROJECT_NAME}/templates & mkdir ${COMPOSE_PROJECT_NAME}/${APP_NAME}/templates

# 放置模板標籤的位置
mkdir ${COMPOSE_PROJECT_NAME}/templates & mkdir ${COMPOSE_PROJECT_NAME}/${APP_NAME}/templatetags
# 創建檔案，包含
#   __init__.py
#   模板標籤名稱.py

# 放置靜態資料的位置
mkdir ${COMPOSE_PROJECT_NAME}/static/images
docker compose run --rm web python ${COMPOSE_PROJECT_NAME}/manage.py collectstatic

# 如果在啟動容器前，發現需要 pip install someModel，要直接在容器內下載，docker compose run --rm 會因為刪除容器而失去下載好的model
docker compose up -d
python manage.py makemigrations
python manage.py migrate